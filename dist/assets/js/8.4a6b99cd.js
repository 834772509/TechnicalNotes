(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{421:function(t,a,v){t.exports=v.p+"assets/img/工作区域.66d541cf.png"},422:function(t,a,v){t.exports=v.p+"assets/img/HEAD.d72afda9.png"},423:function(t,a,v){t.exports=v.p+"assets/img/工作流程.32b7c328.png"},563:function(t,a,v){"use strict";v.r(a);var s=v(15),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-笔记"}},[t._v("#")]),t._v(" Git 笔记")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://gitee.com/all-about-git",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 大全"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("h3",{attrs:{id:"什么是版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是版本控制"}},[t._v("#")]),t._v(" 什么是版本控制")]),t._v(" "),s("p",[t._v("版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。")]),t._v(" "),s("ul",[s("li",[t._v("实现跨区域多人协同开发")]),t._v(" "),s("li",[t._v("追踪和记载一个或者多个文件的历史记录")]),t._v(" "),s("li",[t._v("组织和保护你的源代码和文档")]),t._v(" "),s("li",[t._v("统计工作量")]),t._v(" "),s("li",[t._v("并行开发、提高开发效率")]),t._v(" "),s("li",[t._v("跟踪记录整个软件的开发过程")]),t._v(" "),s("li",[t._v("减轻开发人员的负担，节省时间，同时降低人为错误")])]),t._v(" "),s("p",[t._v("没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。")]),t._v(" "),s("h3",{attrs:{id:"常见的版本控制工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的版本控制工具"}},[t._v("#")]),t._v(" 常见的版本控制工具")]),t._v(" "),s("p",[t._v("主流的版本控制器有如下这些：")]),t._v(" "),s("ul",[s("li",[t._v("Git")]),t._v(" "),s("li",[t._v("SVN（Subversion）")]),t._v(" "),s("li",[t._v("CVS（Concurrent Versions System）")]),t._v(" "),s("li",[t._v("VSS（Micorosoft Visual SourceSafe）")]),t._v(" "),s("li",[t._v("TFS（Team Foundation Server）")]),t._v(" "),s("li",[t._v("Visual Studio Online")])]),t._v(" "),s("p",[t._v("版本控制产品非常的多，现在影响力最大且使用最广泛的是 Git 与 SVN。")]),t._v(" "),s("h3",{attrs:{id:"git-与-svn-的主要区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-与-svn-的主要区别"}},[t._v("#")]),t._v(" Git 与 SVN 的主要区别")]),t._v(" "),s("ul",[s("li",[t._v("SVN 是集中式版本控制系统，版本库集中放在中央服务器。\n"),s("ul",[s("li",[t._v("工作时用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。")])])]),t._v(" "),s("li",[t._v("Git 是分布式版本控制系统，没有中央服务器。\n"),s("ul",[s("li",[t._v("每个人的电脑就是一个完整的版本库，工作时不需要联网，因为版本都在自己电脑上。")]),t._v(" "),s("li",[t._v("例如自己在电脑上改了文件 A，其他人也在电脑上改了文件 A，这时，两人之间只需把各自的修改推送给对方，就可以互相看到对方的修改。Git 可以直接看到更新了哪些代码和文件。")])])])]),t._v(" "),s("p",[t._v("Git 是目前世界上最先进的分布式版本控制系统。")]),t._v(" "),s("h2",{attrs:{id:"环境搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),s("h3",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("Git 官网 在国内下载有难度，建议使用阿里云镜像下载")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 官网"),s("OutboundLink")],1),t._v(" "),s("a",{attrs:{href:"https://npm.taobao.org/mirrors/git-for-windows",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 阿里云镜像下载"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"配置环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置环境变量"}},[t._v("#")]),t._v(" 配置环境变量")]),t._v(" "),s("p",[s("code",[t._v("\\PortableGit\\cmd")])]),t._v(" "),s("h3",{attrs:{id:"配置用户名和邮箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置用户名和邮箱"}},[t._v("#")]),t._v(" 配置用户名和邮箱")]),t._v(" "),s("ul",[s("li",[t._v("设置用户名: "),s("code",[t._v('git config --global user.name "用户名"')])]),t._v(" "),s("li",[t._v("设置邮箱: "),s("code",[t._v("git config --global user.email 邮箱")])])]),t._v(" "),s("h3",{attrs:{id:"记住用户名和密码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#记住用户名和密码"}},[t._v("#")]),t._v(" 记住用户名和密码")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("如密码输入错误可在 控制面板-凭证管理器-Windows 凭据，修改 Git 网址的用户名和密码")])]),t._v(" "),s("p",[s("code",[t._v("git config --global credential.helper store")])]),t._v(" "),s("h3",{attrs:{id:"配置-ssh-公钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-ssh-公钥"}},[t._v("#")]),t._v(" 配置 SSH 公钥")]),t._v(" "),s("ol",[s("li",[t._v("生成公钥: 进入"),s("code",[t._v("C:\\Users\\用户名")]),t._v("，执行命令 "),s("code",[t._v("ssh-keygen -t rsa")]),t._v("（输入内容一律回车）")]),t._v(" "),s("li",[t._v("增加公钥: 将"),s("code",[t._v("C:\\Users\\用户名\\.ssh\\id_rsa.pub")]),t._v("文件中的内容填入远程仓库账户")])]),t._v(" "),s("h2",{attrs:{id:"git-基本理论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-基本理论"}},[t._v("#")]),t._v(" Git 基本理论")]),t._v(" "),s("h3",{attrs:{id:"工作区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作区域"}},[t._v("#")]),t._v(" 工作区域")]),t._v(" "),s("p",[t._v("Git 本地有三个工作区域，远程有一个 git 仓库：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("工作目录（Working Directory）")]),t._v(": 工作区，平时存放项目代码的地方；")]),t._v(" "),s("li",[s("strong",[t._v("暂存区 (Stage/Index)")]),t._v(": 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息；")]),t._v(" "),s("li",[s("strong",[t._v("资源库(Repository 或 Git Directory)")]),t._v(": 仓库区（或本地仓库），安全存放数据的位置，这里面有提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本；")]),t._v(" "),s("li",[s("strong",[t._v("git 仓库(Remote Directory)")]),t._v("：远程仓库，托管代码的服务器，可以简单的认为是项目组中的一台电脑用于远程数据交换；")])]),t._v(" "),s("p",[t._v("文件在这四个区域之间的转换关系如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:v(421),alt:"工作区域"}})]),t._v(" "),s("p",[t._v("本地的三个区域确切的说是 git 仓库中 HEAD 指向的版本：")]),t._v(" "),s("p",[s("img",{attrs:{src:v(422),alt:"HEAD"}})]),t._v(" "),s("ul",[s("li",[t._v("Directory：使用 Git 管理的一个目录，也就是一个仓库，包含工作空间和 Git 的管理空间。")]),t._v(" "),s("li",[t._v("WorkSpace：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。")]),t._v(" "),s("li",[t._v(".git：存放 Git 管理信息的目录，初始化仓库的时候自动创建。")]),t._v(" "),s("li",[t._v("Index/Stage：暂存区(待提交更新区)，在提交进入 repo 之前，可以把所有的更新放在暂存区。")]),t._v(" "),s("li",[t._v("Local Repo：本地仓库，一个存放在本地的版本库；HEAD 会只是当前的开发分支（branch）。")]),t._v(" "),s("li",[t._v("Stash：隐藏，是一个工作状态保存栈，用于保存 / 恢复 WorkSpace 中的临时状态。")])]),t._v(" "),s("h3",{attrs:{id:"工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),s("p",[t._v("Git 的工作流程一般是这样的：")]),t._v(" "),s("ol",[s("li",[t._v("在工作目录中添加、修改文件；")]),t._v(" "),s("li",[t._v("将需要进行版本管理的文件放入暂存区域；")]),t._v(" "),s("li",[t._v("将暂存区域的文件提交到 git 仓库。")])]),t._v(" "),s("p",[t._v("因此，Git 管理的文件有三种状态：已修改（modified）, 已暂存（staged）, 已提交 (committed)")]),t._v(" "),s("p",[s("img",{attrs:{src:v(423),alt:"工作流程"}})]),t._v(" "),s("h2",{attrs:{id:"git-项目搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-项目搭建"}},[t._v("#")]),t._v(" Git 项目搭建")]),t._v(" "),s("h3",{attrs:{id:"本地仓库搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地仓库搭建"}},[t._v("#")]),t._v(" 本地仓库搭建")]),t._v(" "),s("p",[t._v("创建全新的仓库，需要进入 Git 管理的项目的根目录执行：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git init\n")])])]),s("p",[t._v("执行后仅仅在项目目录多出了一个. git 目录，关于版本等的所有信息都在这个目录里面。")]),t._v(" "),s("h3",{attrs:{id:"克隆远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆远程仓库"}},[t._v("#")]),t._v(" 克隆远程仓库")]),t._v(" "),s("p",[t._v("将远程服务器上的仓库完全镜像一份至本地。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git clone Git远程地址\n")])])]),s("h3",{attrs:{id:"增加并关联远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增加并关联远程仓库"}},[t._v("#")]),t._v(" 增加并关联远程仓库")]),t._v(" "),s("ul",[s("li",[t._v("增加仓库: "),s("code",[t._v("git remote add origin Git远程地址")])]),t._v(" "),s("li",[t._v("关联仓库: "),s("code",[t._v("git branch --set-upstream-to=origin master")])])]),t._v(" "),s("h2",{attrs:{id:"git-文件操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-文件操作"}},[t._v("#")]),t._v(" Git 文件操作")]),t._v(" "),s("h3",{attrs:{id:"文件四种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件四种状态"}},[t._v("#")]),t._v(" 文件四种状态")]),t._v(" "),s("p",[t._v("版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Untracked")]),t._v(": 未跟踪, 此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制.\n"),s("ul",[s("li",[t._v("通过 "),s("code",[t._v("git add")]),t._v(" 状态变为 "),s("code",[t._v("Staged")]),t._v("。")])])]),t._v(" "),s("li",[s("strong",[t._v("Unmodify")]),t._v(": 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致.\n"),s("ul",[s("li",[t._v("这种类型的文件有两种去处, 如果它被修改, 而变为 "),s("code",[t._v("Modified")]),t._v(". 如果使用 "),s("code",[t._v("git rm")]),t._v(" 移出版本库, 则成为 "),s("code",[t._v("Untracked")]),t._v(" 文件。")])])]),t._v(" "),s("li",[s("strong",[t._v("Modified")]),t._v(": 文件已修改, 仅仅是修改, 并没有进行其他的操作.\n"),s("ul",[s("li",[t._v("这个文件有两个去处, 通过 "),s("code",[t._v("git add")]),t._v(" 可进入暂存 "),s("code",[t._v("staged")]),t._v(" 状态, 使用 "),s("code",[t._v("git checkout")]),t._v(" 则丢弃修改过, 返回到 "),s("code",[t._v("unmodify")]),t._v(" 状态, 这个 "),s("code",[t._v("git checkout")]),t._v(" 即从库中取出文件, 覆盖当前修改。")])])]),t._v(" "),s("li",[s("strong",[t._v("Staged")]),t._v(": 暂存状态. 执行 git commit 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为 "),s("code",[t._v("Unmodify")]),t._v(" 状态.\n"),s("ul",[s("li",[t._v("执行 "),s("code",[t._v("git reset HEAD filename")]),t._v(" 取消暂存, 文件状态为 "),s("code",[t._v("Modified。")])])])])]),t._v(" "),s("h3",{attrs:{id:"查看文件状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看文件状态"}},[t._v("#")]),t._v(" 查看文件状态")]),t._v(" "),s("ul",[s("li",[t._v("查看指定文件状态: "),s("code",[t._v("git status 文件名")])]),t._v(" "),s("li",[t._v("查看所有文件状态: "),s("code",[t._v("git status")])])]),t._v(" "),s("h3",{attrs:{id:"增加文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增加文件"}},[t._v("#")]),t._v(" 增加文件")]),t._v(" "),s("ul",[s("li",[t._v("增加所有文件到暂存区: "),s("code",[t._v("git add .")])]),t._v(" "),s("li",[t._v("增加指定文件到暂存区: "),s("code",[t._v("git add 文件路径")])]),t._v(" "),s("li",[t._v("增加指定目录到暂存区: "),s("code",[t._v("git add 目录路径")])])]),t._v(" "),s("h3",{attrs:{id:"提交到本地仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交到本地仓库"}},[t._v("#")]),t._v(" 提交到本地仓库")]),t._v(" "),s("ul",[s("li",[t._v("提交暂存区到仓库区: "),s("code",[t._v('git commit -m "提交信息"')])]),t._v(" "),s("li",[t._v("提交暂存区的指定文件到仓库区: "),s("code",[t._v("git commit 文件路径 -m 提交信息")])]),t._v(" "),s("li",[t._v("提交工作区自上次 commit 之后的变化，直接到仓库区: "),s("code",[t._v("git commit -a")])])]),t._v(" "),s("h3",{attrs:{id:"忽略文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),s("p",[t._v("有些时候不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。")]),t._v(" "),s("p",[t._v('在主目录下建立 ".gitignore" 文件，此文件有如下规则：')]),t._v(" "),s("ol",[s("li",[t._v("忽略文件中的空行或以井号（#）开始的行将会被忽略。")]),t._v(" "),s("li",[t._v("可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。")]),t._v(" "),s("li",[t._v("如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。")]),t._v(" "),s("li",[t._v("如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。")]),t._v(" "),s("li",[t._v("如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。")])]),t._v(" "),s("div",{staticClass:"language-gitignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-gitignore"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#为注释")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token entry string"}},[t._v("​")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token entry string"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(".txt        # 忽略所有 .txt结尾的文件，上传就不会被选中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token entry string"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.txt     # 但lib.txt除外")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token entry string"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("temp        # 仅忽略项目根目录下的TODO文件,不包括其它目录temp")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token entry string"}},[t._v("build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("       # 忽略build"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("目录下的所有文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token entry string"}},[t._v("doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(".txt    # 会忽略 doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("notes.txt 但不包括 doc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("arch.txt")]),t._v("\n")])])]),s("h3",{attrs:{id:"暂存文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存文件"}},[t._v("#")]),t._v(" 暂存文件")]),t._v(" "),s("p",[t._v("如果当前有部分代码未提交，但需要编写其他部分代码时，则需要将当前部分代码保存至暂存区。")]),t._v(" "),s("ul",[s("li",[t._v("存储文件: "),s("code",[t._v("git stash")])]),t._v(" "),s("li",[t._v("取出文件: "),s("code",[t._v("git stash pop")])])]),t._v(" "),s("h3",{attrs:{id:"撤销修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("撤销未提交修改: "),s("code",[t._v("git checkout 路径")])])]),t._v(" "),s("li",[s("p",[t._v("撤销已提交修改:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset HEAD 路径\ngit checkout 路径\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"git-分支操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-分支操作"}},[t._v("#")]),t._v(" Git 分支操作")]),t._v(" "),s("h3",{attrs:{id:"列出分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列出分支"}},[t._v("#")]),t._v(" 列出分支")]),t._v(" "),s("ul",[s("li",[t._v("列出所有本地分支: "),s("code",[t._v("git branch")])]),t._v(" "),s("li",[t._v("列出所有远程分支: "),s("code",[t._v("git branch -r")])]),t._v(" "),s("li",[t._v("列出所有本地分支和远程分支: "),s("code",[t._v("git branch -a")])])]),t._v(" "),s("h3",{attrs:{id:"新建分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建分支"}},[t._v("#")]),t._v(" 新建分支")]),t._v(" "),s("ul",[s("li",[t._v("新建分支并停留当前分支: "),s("code",[t._v("git branch 分支名")])]),t._v(" "),s("li",[t._v("新建分支并切换到该分支: "),s("code",[t._v("git checkout -b 分支名")])]),t._v(" "),s("li",[t._v("新建分支并指向指定 commit: "),s("code",[t._v("git branch 分支名 commit名称")])]),t._v(" "),s("li",[t._v("新建分支并与指定的远程分支建立追踪关系: "),s("code",[t._v("git branch --track 分支名 远程分支名")])])]),t._v(" "),s("h3",{attrs:{id:"合并分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),s("ul",[s("li",[t._v("合并指定分支到当前分支: "),s("code",[t._v("git merge 分支名")])]),t._v(" "),s("li",[t._v("指定 commit 合并到当前分支: "),s("code",[t._v("git cherry-pick commit名")])])]),t._v(" "),s("h3",{attrs:{id:"关联远程分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关联远程分支"}},[t._v("#")]),t._v(" 关联远程分支")]),t._v(" "),s("p",[s("code",[t._v("git branch --set-upstream-to=远程分支名 本地分支名")])]),t._v(" "),s("h3",{attrs:{id:"删除分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),s("ul",[s("li",[t._v("删除本地分支: "),s("code",[t._v("git branch -d 分支名")])]),t._v(" "),s("li",[t._v("删除远程分支: "),s("code",[t._v("git push origin --delete 分支名")])])]),t._v(" "),s("h2",{attrs:{id:"git-远程同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-远程同步"}},[t._v("#")]),t._v(" Git 远程同步")]),t._v(" "),s("h3",{attrs:{id:"列出远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列出远程仓库"}},[t._v("#")]),t._v(" 列出远程仓库")]),t._v(" "),s("p",[s("code",[t._v("git remote -v")])]),t._v(" "),s("h3",{attrs:{id:"同步至本地仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步至本地仓库"}},[t._v("#")]),t._v(" 同步至本地仓库")]),t._v(" "),s("ul",[s("li",[t._v("下载远程仓库的所有变动(不合并): "),s("code",[t._v("git fetch [远程主机名]")])]),t._v(" "),s("li",[t._v("取回远程仓库的变化，并与本地分支合并: "),s("code",[t._v("git pull [远程主机名] [远程分支名]")])])]),t._v(" "),s("h3",{attrs:{id:"提交到远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交到远程仓库"}},[t._v("#")]),t._v(" 提交到远程仓库")]),t._v(" "),s("ul",[s("li",[t._v("上传本地指定分支到远程仓库: "),s("code",[t._v("git push [远程主机名] [远程分支名]")])]),t._v(" "),s("li",[t._v("强行推送当前分支到远程仓库，即使有冲突: "),s("code",[t._v("git push [远程主机名] --force")])]),t._v(" "),s("li",[t._v("推送所有分支到远程仓库: "),s("code",[t._v("git push [远程主机名] --all")])])]),t._v(" "),s("h2",{attrs:{id:"常用技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用技巧"}},[t._v("#")]),t._v(" 常用技巧")]),t._v(" "),s("h3",{attrs:{id:"修复-push-失败"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修复-push-失败"}},[t._v("#")]),t._v(" 修复 push 失败")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git merge --abort\ngit reset --merge\ngit pull\n")])])]),s("h3",{attrs:{id:"删除排除目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除排除目录"}},[t._v("#")]),t._v(" 删除排除目录")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('git rm -rf .idea\ngit commit -m "删除排除目录"\ngit push origin master\n')])])])])}),[],!1,null,null,null);a.default=_.exports}}]);